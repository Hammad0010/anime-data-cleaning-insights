geom_line(aes(y = count), size = 1.5) +  # Line for production count
geom_line(aes(y = avg_members / 1000), size = 1.5, linetype = "dashed") +  # Dashed line for audience interest
labs(
title = "TV Series Production and Audience Interest Trends by Episode Length",
subtitle = "Short, Medium, and Long episodic TV series trends over the years",
x = "Year",
y = "Number of TV Series Produced",
color = "Episode Category"
) +
scale_y_continuous(
name = "Number of TV Series Produced",  # Left Y-axis for production
sec.axis = sec_axis(~ . * 1000, name = "Average Audience Interest (Members)")  # Right Y-axis for audience interest
) +
scale_color_manual(values = c("Short (1-13)" = "blue", "Medium (14-50)" = "green", "Long (51+)" = "red")) +
scale_x_continuous(
breaks = seq(1961, max(anime_trends$year), by = 10),  # Start from 1961 with 10-year intervals
limits = c(1961, max(anime_trends$year))  # Ensure the x-axis starts at 1961
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10)
)
# Load required libraries
library(ggplot2)
library(dplyr)
library(readr)
# Load the dataset
anime_data <- read_csv("D:/Universty/R_assignment/tidied_anime_data.csv", show_col_types = FALSE)
# Filter for TV series only and categorize by episode length
anime_data <- anime_data %>%
filter(type == "TV") %>%  # Include only TV series
mutate(episode_category = case_when(
episodes <= 13 ~ "Short (1-13)",
episodes <= 50 ~ "Medium (14-50)",
episodes > 50 ~ "Long (51+)"
))
# Count the number of TV series and calculate average members for each category per year
anime_trends <- anime_data %>%
filter(!is.na(year), year > 0, !is.na(episode_category)) %>%
group_by(year, episode_category) %>%
summarise(
count = n(),  # Count the number of TV series
avg_members = mean(members, na.rm = TRUE)  # Average number of members
) %>%
ungroup()
# Plot production trends with audience interest represented by solid lines
ggplot(anime_trends, aes(x = year, color = episode_category, group = episode_category)) +
# Production trends
geom_line(aes(y = count), size = 1.5) +  # Line for production count
geom_line(aes(y = avg_members / 1000), size = 1.5) +  # Line for audience interest
labs(
title = "TV Series Production and Audience Interest Trends by Episode Length",
subtitle = "Short, Medium, and Long episodic TV series trends over the years",
x = "Year",
y = "Number of TV Series Produced",
color = "Episode Category"
) +
scale_y_continuous(
name = "Number of TV Series Produced",  # Left Y-axis for production
sec.axis = sec_axis(~ . * 1000, name = "Average Audience Interest (Members)")  # Right Y-axis for audience interest
) +
scale_color_manual(values = c("Short (1-13)" = "blue", "Medium (14-50)" = "green", "Long (51+)" = "red")) +
scale_x_continuous(
breaks = seq(1961, max(anime_trends$year), by = 10),  # Start from 1961 with 10-year intervals
limits = c(1961, max(anime_trends$year))  # Ensure the x-axis starts at 1961
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10)
)
# Load required libraries
library(ggplot2)
library(dplyr)
library(readr)
# Load the dataset
anime_data <- read_csv("D:/Universty/R_assignment/tidied_anime_data.csv", show_col_types = FALSE)
# Filter for TV series only and categorize by episode length
anime_data <- anime_data %>%
filter(type == "TV") %>%  # Include only TV series
mutate(episode_category = case_when(
episodes <= 13 ~ "Short (1-13)",
episodes <= 50 ~ "Medium (14-50)",
episodes > 50 ~ "Long (51+)"
))
# Count the number of TV series and calculate average members for each category per year
anime_trends <- anime_data %>%
filter(!is.na(year), year > 0, !is.na(episode_category)) %>%
group_by(year, episode_category) %>%
summarise(
count = n(),  # Count the number of TV series
avg_members = mean(members, na.rm = TRUE)  # Average number of members
) %>%
ungroup()
# Plot production trends and audience interest with clear differentiation
ggplot() +
# Production trends (solid lines)
geom_line(data = anime_trends, aes(x = year, y = count, color = episode_category), size = 1.5) +
# Audience interest trends (dashed lines)
geom_line(data = anime_trends, aes(x = year, y = avg_members / 1000, color = episode_category), size = 1.5, linetype = "dashed") +
labs(
title = "TV Series Production and Audience Interest Trends by Episode Length",
subtitle = "Short, Medium, and Long episodic TV series trends over the years",
x = "Year",
y = "Number of TV Series Produced",
color = "Episode Category"
) +
scale_y_continuous(
name = "Number of TV Series Produced",  # Left Y-axis for production
sec.axis = sec_axis(~ . * 1000, name = "Average Audience Interest (Members)")  # Right Y-axis for audience interest
) +
scale_color_manual(values = c("Short (1-13)" = "blue", "Medium (14-50)" = "green", "Long (51+)" = "red")) +
scale_x_continuous(
breaks = seq(1961, max(anime_trends$year), by = 10),  # Start from 1961 with 10-year intervals
limits = c(1961, max(anime_trends$year))  # Ensure the x-axis starts at 1961
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10)
)
# Load required libraries
library(ggplot2)
library(dplyr)
library(readr)
# Load the dataset
anime_data <- read_csv("D:/Universty/R_assignment/tidied_anime_data.csv", show_col_types = FALSE)
# Filter for TV series only and categorize by episode length
anime_data <- anime_data %>%
filter(type == "TV") %>%  # Include only TV series
mutate(episode_category = case_when(
episodes <= 13 ~ "Short (1-13)",
episodes <= 50 ~ "Medium (14-50)",
episodes > 50 ~ "Long (51+)"
))
# Count the number of TV series and calculate average members for each category per year
anime_trends <- anime_data %>%
filter(!is.na(year), year > 0, !is.na(episode_category)) %>%
group_by(year, episode_category) %>%
summarise(
count = n(),  # Count the number of TV series
avg_members = mean(members, na.rm = TRUE)  # Average number of members
) %>%
ungroup()
# Plot production trends with audience interest represented by scatter dots
ggplot(anime_trends, aes(x = year, color = episode_category, group = episode_category)) +
# Production trends
geom_line(aes(y = count), size = 1.5) +  # Line for production count
geom_point(aes(y = avg_members / 1000), size = 3, shape = 21, fill = "white") +  # Scatter dots for audience interest
labs(
title = "TV Series Production and Audience Interest Trends by Episode Length",
subtitle = "Short, Medium, and Long episodic TV series trends over the years",
x = "Year",
y = "Number of TV Series Produced",
color = "Episode Category"
) +
scale_y_continuous(
name = "Number of TV Series Produced",  # Left Y-axis for production
sec.axis = sec_axis(~ . * 1000, name = "Average Audience Interest (Members)")  # Right Y-axis for audience interest
) +
scale_color_manual(values = c("Short (1-13)" = "blue", "Medium (14-50)" = "green", "Long (51+)" = "red")) +
scale_x_continuous(
breaks = seq(1961, max(anime_trends$year), by = 10),  # Start from 1961 with 10-year intervals
limits = c(1961, max(anime_trends$year))  # Ensure the x-axis starts at 1961
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10)
)
# Load required libraries
library(ggplot2)
library(dplyr)
# Filter for top-rated anime (e.g., rating >= 9)
high_rated_anime <- anime_data %>%
filter(rating >= 9)
# Box plot to visualize the distribution of ratings for high-performing anime
ggplot(high_rated_anime, aes(x = "", y = rating)) +
geom_boxplot(fill = "orange", color = "black") +
labs(
title = "Distribution of Ratings for High-Performing Anime",
x = "",
y = "Ratings"
) +
theme_minimal()
# Histogram to visualize the distribution of ratings
ggplot(anime_data, aes(x = rating)) +
geom_histogram(bins = 30, fill = "purple", color = "black", alpha = 0.7) +
labs(
title = "Histogram of Anime Ratings",
x = "Ratings",
y = "Frequency"
) +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(tidyr)
library(readr)
library(RColorBrewer)
install.packages("viridis")
# Load necessary libraries
library(ggplot2)
anime_data <- read_csv("D:/Universty/R_assignment/tidied_anime_data.csv", show_col_types = FALSE)
# Load necessary libraries
library(ggplot2)
library(readr)
anime_data <- read_csv("D:/Universty/R_assignment/tidied_anime_data.csv", show_col_types = FALSE)
# Create a summary table of anime types
anime_type_summary <- as.data.frame(table(anime_data$type))
colnames(anime_type_summary) <- c("Type", "Count")
# Sort the data by Count in descending order
anime_type_summary <- anime_type_summary[order(-anime_type_summary$Count), ]
# Add a proportion column for the labels
anime_type_summary$Proportion <- round((anime_type_summary$Count / sum(anime_type_summary$Count)) * 100, 1)
# Convert Type to a factor with levels in the sorted order
anime_type_summary$Type <- factor(anime_type_summary$Type, levels = anime_type_summary$Type)
# Create a donut chart
ggplot(anime_type_summary, aes(x = 2, y = Count, fill = Type)) +
geom_bar(stat = "identity", width = 1, color = "white") +  # Use geom_bar for segments
coord_polar(theta = "y") +  # Convert bar chart into a circular format
geom_text(aes(label = paste0(Proportion, "%")),
position = position_stack(vjust = 0.5), color = "white") +  # Position labels at the center of each segment
xlim(0.5, 2.5) +  # Adjust the x-axis for a donut effect
labs(title = "Proportion of Anime Types in the Dataset") +
theme_void() +  # Simplify chart design
theme(legend.title = element_blank())  # Remove legend title
# Load required libraries
library(ggplot2)
library(dplyr)
library(readr)
# Load the dataset
anime_data <- read_csv("D:/Universty/R_assignment/tidied_anime_data.csv", show_col_types = FALSE)
# Prepare the data for user engagement over time
user_engagement <- anime_data %>%
filter(!is.na(year), year > 0) %>%  # Ensure valid years
group_by(year) %>%
summarise(total_members = sum(members, na.rm = TRUE)) %>%  # Sum members for each year
ungroup()
# Plot user engagement over time
ggplot(user_engagement, aes(x = year, y = total_members)) +
geom_line(color = "darkorange", size = 1.5) +  # Line for user engagement
geom_point(color = "darkorange", size = 2, alpha = 0.8) +  # Points for individual years
labs(
title = "User Engagement Over Time",
subtitle = "Total number of members interacting with anime per year",
x = "Year",
y = "Total Members"
) +
scale_y_continuous(labels = scales::comma) +  # Add commas for large numbers
scale_x_continuous(
breaks = seq(min(user_engagement$year), max(user_engagement$year), by = 10),  # Breaks every 10 years
labels = seq(min(user_engagement$year), max(user_engagement$year), by = 10)  # Label every 10 years
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10),  # Angled labels
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
)
# Load required libraries
library(ggplot2)
library(dplyr)
# Load your data
anime_data <- read_csv("D:/Universty/R_assignment/tidied_anime_data.csv", show_col_types = FALSE)
# Clean and filter the data for Movies and TV Series only
anime_data <- anime_data %>%
filter(!is.na(year), year > 0, type %in% c("Movie", "TV"))
# Calculate the number of releases by year and type
type_trend <- anime_data %>%
group_by(year, type) %>%
summarize(releases = n()) %>%
ungroup()
# Plotting the number of releases for Movies and TV Series
plot1 <- ggplot(type_trend, aes(x = year, y = releases, color = type, group = type)) +
geom_line(size = 1) +
geom_point(size = 2) +
labs(
title = "Popularity of Movies and TV Series Over Time",
x = "Year",
y = "Number of Releases",
color = "Anime Type"
) +
theme_minimal()
# Display the plot
print(plot1)
# Load required libraries
library(ggplot2)
library(dplyr)
library(readr)
# Load the dataset
anime_data <- read_csv("D:/Universty/R_assignment/tidied_anime_data.csv", show_col_types = FALSE)
# Filter for TV series only and categorize by episode length
anime_data <- anime_data %>%
filter(type == "TV") %>%  # Include only TV series
mutate(episode_category = case_when(
episodes <= 13 ~ "Short (1-13)",
episodes <= 50 ~ "Medium (14-50)",
episodes > 50 ~ "Long (51+)",
TRUE ~ "Unknown"
))
# Summarize average members for each category
episode_popularity <- anime_data %>%
filter(!is.na(episode_category)) %>%  # Remove rows with missing categories
group_by(episode_category) %>%
summarise(
avg_members = mean(members, na.rm = TRUE),
total_members = sum(members, na.rm = TRUE)
) %>%
arrange(desc(avg_members))
# Plot the average members for each category
ggplot(episode_popularity, aes(x = reorder(episode_category, -avg_members), y = avg_members)) +
geom_bar(stat = "identity", fill = "steelblue", color = "black", width = 0.7) +
geom_text(aes(label = scales::comma(round(avg_members))), vjust = -0.5, size = 4) +  # Add labels
labs(
title = "Popularity of TV Series by Episode Length",
subtitle = "Average members for short, medium, and long episodic TV series",
x = "Episode Length Category",
y = "Average Number of Members"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Load required libraries
library(ggplot2)
library(dplyr)
library(readr)
# Load the dataset
anime_data <- read_csv("D:/Universty/R_assignment/tidied_anime_data.csv", show_col_types = FALSE)
# Filter for TV series only and categorize by episode length
anime_data <- anime_data %>%
filter(type == "TV") %>%  # Include only TV series
mutate(episode_category = case_when(
episodes <= 13 ~ "Short (1-13)",
episodes <= 50 ~ "Medium (14-50)",
episodes > 50 ~ "Long (51+)"
))  # Removed "Unknown" category
# Count the number of TV series produced for each category per year
anime_production_trends <- anime_data %>%
filter(!is.na(year), year > 0, !is.na(episode_category)) %>%  # Ensure valid years and categories
group_by(year, episode_category) %>%
summarise(count = n(), .groups = "drop")  # Count the number of TV series per category
# Plot production trends for short, medium, and long episodic TV series
ggplot(anime_production_trends, aes(x = year, y = count, color = episode_category, group = episode_category)) +
geom_line(size = 1.5) +  # Line for trends
geom_point(size = 2, alpha = 0.8) +  # Points for individual years
labs(
title = "TV Series Production Trends by Episode Length",
subtitle = "Short, Medium, and Long episodic TV series trends over the years",
x = "Year",
y = "Number of TV Series Produced",
color = "Episode Category"
) +
scale_color_manual(values = c("Short (1-13)" = "blue", "Medium (14-50)" = "green", "Long (51+)" = "red")) +
scale_x_continuous(
breaks = seq(1961, max(anime_production_trends$year), by = 10),  # Start from 1961 with 10-year intervals
limits = c(1961, max(anime_production_trends$year))  # Ensure the x-axis starts at 1961
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10)
)
# Load required libraries
library(ggplot2)
library(dplyr)
library(readr)
library(patchwork)
# Load the dataset
anime_data <- read_csv("D:/Universty/R_assignment/tidied_anime_data.csv", show_col_types = FALSE)
# Prepare data for Movies
movie_ratings <- anime_data %>%
filter(type == "Movie", !is.na(year), year > 0) %>%
group_by(year) %>%
summarise(avg_rating = mean(rating, na.rm = TRUE)) %>%
ungroup()
# Prepare data for TV Series
tv_ratings <- anime_data %>%
filter(type == "TV", !is.na(year), year > 0) %>%
group_by(year) %>%
summarise(avg_rating = mean(rating, na.rm = TRUE)) %>%
ungroup()
# Determine the common x-axis range
x_min <- min(c(movie_ratings$year, tv_ratings$year))
x_max <- max(c(movie_ratings$year, tv_ratings$year))
# Set a common y-axis range
y_min <- min(c(movie_ratings$avg_rating, tv_ratings$avg_rating))
y_max <- max(c(movie_ratings$avg_rating, tv_ratings$avg_rating))
# Plot for Movie Ratings
movie_plot <- ggplot(movie_ratings, aes(x = year, y = avg_rating)) +
geom_smooth(color = "blue", size = 1.5, se = FALSE) +  # Smooth line
geom_point(color = "blue", size = 2, alpha = 0.6) +    # Points for data
labs(
title = "Average Movie Ratings Over the Years",
subtitle = "Smooth trends for better readability",
x = "Year",
y = "Average Rating"
) +
scale_x_continuous(limits = c(x_min, x_max), breaks = seq(x_min, x_max, by = 10)) +
scale_y_continuous(limits = c(y_min, y_max)) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Plot for TV Series Ratings
tv_plot <- ggplot(tv_ratings, aes(x = year, y = avg_rating)) +
geom_smooth(color = "green", size = 1.5, se = FALSE) +  # Smooth line
geom_point(color = "green", size = 2, alpha = 0.6) +    # Points for data
labs(
title = "Average TV Series Ratings Over the Years",
subtitle = "Smooth trends for better readability",
x = "Year",
y = "Average Rating"
) +
scale_x_continuous(limits = c(x_min, x_max), breaks = seq(x_min, x_max, by = 10)) +
scale_y_continuous(limits = c(y_min, y_max)) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Combine the two plots
combined_plot <- movie_plot + tv_plot
# Display the combined plot
print(combined_plot)
library(dplyr)
library(ggplot2)
install.packages("babynames")
library(babynames)
babynames
library(dplyr)
library(ggplot2)
install.packages("babynames")
library(babynames)
babynames
View(babynames)
babynames_20th_century_male <- babynames %>%
filter(year >= 1900, year <= 1999, sex == "M")
# Filter for male names in the 20th century (1900-1999)
babynames_20th_century_male <- babynames %>%
filter(year >= 1900, year <= 1999, sex == "M")
# Find the three most popular male names by summing up their occurrences over the 20th century
top_male_names_20th_century <- babynames_20th_century_male %>%
group_by(name) %>%
summarise(total = sum(n)) %>%
arrange(desc(total)) %>%
slice(1:3) %>%
pull(name)
# Filter original data to only include these top names
top_male_names_data <- babynames_20th_century_male %>%
filter(name %in% top_male_names_20th_century)
# Plot the popularity trends of the top 3 male names over the 20th century
ggplot(top_male_names_data, aes(x = year, y = prop, color = name)) +
geom_line() +
labs(title = "Popularity of the Three Most Popular Male Names (1900-1999)",
x = "Year", y = "Proportion") +
theme_minimal()
install.packages("babynames")
anime_data <- read_csv("D:/Universty/R_assignment/anime.csv", show_col_types = FALSE)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(readr)
library(RColorBrewer)
install.packages("viridis")
library(viridis)
# Load the dataset
anime_data <- read_csv("D:/Universty/R_assignment/anime.csv", show_col_types = FALSE)
head(anime_data)
#
show(anime_data)
view(anime_data)
library(dplyr)
library(ggplot2)
install.packages("babynames")
library(babynames)
babynames
View(babynames)
install.packages("babynames")
# Load necessary libraries
library(dplyr)
library(tidyr)
library(readr)
library(RColorBrewer)
# Load the dataset
anime_data <- read_csv("D:/Universty/R_assignment/anime.csv", show_col_types = FALSE)
view(anime_data)
view(anime,csv)
